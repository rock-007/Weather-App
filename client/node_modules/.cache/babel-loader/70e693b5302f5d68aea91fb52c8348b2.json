{"ast":null,"code":"var _jsxFileName = \"/Users/umairRocks/codeclan_work/week_09/weather-app/client/src/containers/WeatherContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport City from \"../components/City\";\nimport SearchForm from \"../components/SearchForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherContainer = () => {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  useEffect(() => {\n    if (selectedCity != null) {\n      getCities(selectedCity);\n    }\n  }, [selectedCity]);\n\n  const getCities = function (selectedCity) {\n    const cityApi = `http://http://pro.openweathermap.org/data/2.5/forecast/hourly?q=london&appid=3031aac4ff517ddfc83b94a403d374b0`;\n    const forecastApi = `http://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=1a9a20046a26886e891582ce46507106`;\n    Promise.all([fetch(cityApi), fetch(forecastApi)]).then(res => {\n      return Promise.all(res.map(function (res) {\n        return res.json();\n      }));\n    }).then(result => setCities([...cities, {\n      daily: result[0],\n      forecast: result[1]\n    }]));\n  };\n\n  const onCitySubmit = function (city) {\n    setSelectedCity(city);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      cities: cities,\n      onCitySubmit: onCitySubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), selectedCity != null ? /*#__PURE__*/_jsxDEV(City, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 37\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherContainer, \"1ET5O4FcDZj1XJeXTTvj07Inv7U=\");\n\n_c = WeatherContainer;\nexport default WeatherContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherContainer\");","map":{"version":3,"sources":["/Users/umairRocks/codeclan_work/week_09/weather-app/client/src/containers/WeatherContainer.js"],"names":["React","useState","useEffect","City","SearchForm","WeatherContainer","cities","setCities","selectedCity","setSelectedCity","getCities","cityApi","forecastApi","Promise","all","fetch","then","res","map","json","result","daily","forecast","onCitySubmit","city"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,YAAY,IAAI,IAApB,EAA0B;AACtBE,MAAAA,SAAS,CAACF,YAAD,CAAT;AACH;AACJ,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;;AAMA,QAAME,SAAS,GAAG,UAAUF,YAAV,EAAwB;AACtC,UAAMG,OAAO,GAAI,+GAAjB;AACA,UAAMC,WAAW,GAAI,qDAAoDJ,YAAa,yCAAtF;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACC,KAAK,CAACJ,OAAD,CAAN,EAAiBI,KAAK,CAACH,WAAD,CAAtB,CAAZ,EACKI,IADL,CACWC,GAAD,IAAS;AACX,aAAOJ,OAAO,CAACC,GAAR,CACHG,GAAG,CAACC,GAAJ,CAAQ,UAAUD,GAAV,EAAe;AACnB,eAAOA,GAAG,CAACE,IAAJ,EAAP;AACH,OAFD,CADG,CAAP;AAKH,KAPL,EAQKH,IARL,CAQWI,MAAD,IACFb,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY;AAACe,MAAAA,KAAK,EAAED,MAAM,CAAC,CAAD,CAAd;AAAmBE,MAAAA,QAAQ,EAAEF,MAAM,CAAC,CAAD;AAAnC,KAAZ,CAAD,CATjB;AAWH,GAdD;;AAgBA,QAAMG,YAAY,GAAG,UAAUC,IAAV,EAAgB;AACjCf,IAAAA,eAAe,CAACe,IAAD,CAAf;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,MAAM,EAAElB,MAApB;AAA4B,MAAA,YAAY,EAAEiB;AAA1C;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKf,YAAY,IAAI,IAAhB,gBAAuB,QAAC,IAAD;AAAM,MAAA,MAAM,EAAEF;AAAd;AAAA;AAAA;AAAA;AAAA,YAAvB,GAAkD,IAFvD;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CApCD;;GAAMD,gB;;KAAAA,gB;AAsCN,eAAeA,gBAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport City from \"../components/City\";\nimport SearchForm from \"../components/SearchForm\";\n\nconst WeatherContainer = () => {\n    const [cities, setCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState(null);\n\n    useEffect(() => {\n        if (selectedCity != null) {\n            getCities(selectedCity);\n        }\n    }, [selectedCity]);\n\n    const getCities = function (selectedCity) {\n        const cityApi = `http://http://pro.openweathermap.org/data/2.5/forecast/hourly?q=london&appid=3031aac4ff517ddfc83b94a403d374b0`;\n        const forecastApi = `http://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=1a9a20046a26886e891582ce46507106`;\n        Promise.all([fetch(cityApi), fetch(forecastApi)])\n            .then((res) => {\n                return Promise.all(\n                    res.map(function (res) {\n                        return res.json();\n                    })\n                );\n            })\n            .then((result) =>\n                setCities([...cities, {daily: result[0], forecast: result[1]}])\n            );\n    };\n\n    const onCitySubmit = function (city) {\n        setSelectedCity(city);\n    };\n\n    return (\n        <div>\n            <SearchForm cities={cities} onCitySubmit={onCitySubmit} />\n            {selectedCity != null ? <City cities={cities} /> : null}\n        </div>\n    );\n};\n\nexport default WeatherContainer;\n"]},"metadata":{},"sourceType":"module"}