{"ast":null,"code":"var _jsxFileName = \"/Users/umairRocks/codeclan_work/week_09/weather-app/client/src/Containers/WeatherContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport City from \"../Components/City\";\nimport SearchForm from \"../Components/SearchForm\";\nimport DisplayFavourite from \"../Components/DisplayFavourite\";\nimport UkMap from \"./UkMap\";\nimport MapStyles from \"../Components/MapStyles\";\nimport { getFavourites, postFavourite, deleteFavourite } from \"../services/FavouriteService\";\nimport { GoogleMap } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherContainer = () => {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [favourites, setFavourites] = useState(null);\n  const [displayFavourites, setDisplayFavourites] = useState(null);\n  useEffect(() => {\n    getFavourite();\n  }, []);\n  useEffect(() => {\n    if (selectedCity != null) {\n      getCities(selectedCity);\n    }\n  }, [selectedCity]);\n  useEffect(() => {\n    if (favourites !== null) {\n      getFavouriteCities(favourites);\n    }\n  }, [favourites]); //API call to get the wetherinfo for favourite cities\n\n  const getFavouriteCities = function (favourites) {\n    console.log(favourites[0]);\n    let favouiteFetch = favourites[0].map(eachCity => {\n      return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${eachCity[\"name\"]}&appid=3031aac4ff517ddfc83b94a403d374b0`);\n    });\n    console.log(favouiteFetch);\n    Promise.all(favouiteFetch).then(res => {\n      console.log(res);\n      return Promise.all(res.map(function (res) {\n        return res.json();\n      }));\n    }).then(result => setDisplayFavourites(result));\n  }; //API call to get the wetherinfo (forcastApi) for selected city and for temperature graph(cityAPi)\n\n\n  const getCities = function (selectedCity) {\n    const cityApi = `http://pro.openweathermap.org/data/2.5/forecast/hourly?q=${selectedCity}&appid=3031aac4ff517ddfc83b94a403d374b0`;\n    const forecastApi = `http://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=1a9a20046a26886e891582ce46507106`;\n    Promise.all([fetch(cityApi), fetch(forecastApi)]).then(res => {\n      return Promise.all(res.map(function (res) {\n        return res.json();\n      }));\n    }).then(result => setCities([{\n      daily: result[0],\n      forecast: result[1]\n    }]));\n  }; // Set user selected City - using click on favourite\n\n\n  const favForcast = favCity => {\n    setSelectedCity(favCity);\n  }; //Set user selected City- using form input\n\n\n  const onCitySubmit = function (city) {\n    setSelectedCity(city);\n  }; //API call to get favourites from DB\n\n\n  const getFavourite = () => {\n    getFavourites().then(result => {\n      console.log(result);\n      return setFavourites([result]);\n    });\n  }; //API call to save favourites to DB\n\n\n  const addFavourite = favouriteCity => {\n    console.log(favouriteCity);\n    postFavourite(favouriteCity).then(() => getFavourite());\n  }; //API call to dalete favourites in DB\n\n\n  const deleteFav = city => {\n    console.log(favourites[0]);\n    const result = favourites[0].filter(eachCity => eachCity[\"name\"].toLowerCase() !== city.toLowerCase());\n    deleteFavourite(city).then(() => {\n      setFavourites([result]);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      cities: cities,\n      onCitySubmit: onCitySubmit,\n      addFavourite: addFavourite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"flex-grid\",\n      children: [displayFavourites != null ? /*#__PURE__*/_jsxDEV(DisplayFavourite, {\n        displayFavourites1: displayFavourites,\n        deleteFavourite2: deleteFav,\n        favouriteforcast2: favForcast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(UkMap, {\n        cities: cities,\n        styles: MapStyles.styles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), selectedCity != null ? /*#__PURE__*/_jsxDEV(City, {\n      cities: cities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 37\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WeatherContainer, \"m69ktEUO97h/VD1/WDAPsB2t4Xw=\");\n\n_c = WeatherContainer;\nexport default WeatherContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherContainer\");","map":{"version":3,"sources":["/Users/umairRocks/codeclan_work/week_09/weather-app/client/src/Containers/WeatherContainer.js"],"names":["React","useState","useEffect","City","SearchForm","DisplayFavourite","UkMap","MapStyles","getFavourites","postFavourite","deleteFavourite","GoogleMap","WeatherContainer","cities","setCities","selectedCity","setSelectedCity","favourites","setFavourites","displayFavourites","setDisplayFavourites","getFavourite","getCities","getFavouriteCities","console","log","favouiteFetch","map","eachCity","fetch","Promise","all","then","res","json","result","cityApi","forecastApi","daily","forecast","favForcast","favCity","onCitySubmit","city","addFavourite","favouriteCity","deleteFav","filter","toLowerCase","styles"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport City from \"../Components/City\";\nimport SearchForm from \"../Components/SearchForm\";\nimport DisplayFavourite from \"../Components/DisplayFavourite\";\nimport UkMap from \"./UkMap\";\nimport MapStyles from \"../Components/MapStyles\";\n\nimport {\n    getFavourites,\n    postFavourite,\n    deleteFavourite,\n} from \"../services/FavouriteService\";\nimport { GoogleMap } from \"@react-google-maps/api\";\n\nconst WeatherContainer = () => {\n    const [cities, setCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState(null);\n    const [favourites, setFavourites] = useState(null);\n    const [displayFavourites, setDisplayFavourites] = useState(null);\n\n    useEffect(() => {\n        getFavourite();\n    }, []);\n\n    useEffect(() => {\n        if (selectedCity != null) {\n            getCities(selectedCity);\n        }\n    }, [selectedCity]);\n\n    useEffect(() => {\n        if (favourites !== null) {\n            getFavouriteCities(favourites);\n        }\n    }, [favourites]);\n\n    //API call to get the wetherinfo for favourite cities\n    const getFavouriteCities = function (favourites) {\n        console.log(favourites[0]);\n        let favouiteFetch = favourites[0].map((eachCity) => {\n            return fetch(\n                `http://api.openweathermap.org/data/2.5/weather?q=${eachCity[\"name\"]}&appid=3031aac4ff517ddfc83b94a403d374b0`\n            );\n        });\n        console.log(favouiteFetch);\n\n        Promise.all(favouiteFetch)\n            .then((res) => {\n                console.log(res);\n                return Promise.all(\n                    res.map(function (res) {\n                        return res.json();\n                    })\n                );\n            })\n            .then((result) => setDisplayFavourites(result));\n    };\n\n    //API call to get the wetherinfo (forcastApi) for selected city and for temperature graph(cityAPi)\n    const getCities = function (selectedCity) {\n        const cityApi = `http://pro.openweathermap.org/data/2.5/forecast/hourly?q=${selectedCity}&appid=3031aac4ff517ddfc83b94a403d374b0`;\n        const forecastApi = `http://api.openweathermap.org/data/2.5/forecast?q=${selectedCity}&appid=1a9a20046a26886e891582ce46507106`;\n        Promise.all([fetch(cityApi), fetch(forecastApi)])\n            .then((res) => {\n                return Promise.all(\n                    res.map(function (res) {\n                        return res.json();\n                    })\n                );\n            })\n            .then((result) =>\n                setCities([{ daily: result[0], forecast: result[1] }])\n            );\n    };\n\n    // Set user selected City - using click on favourite\n    const favForcast = (favCity) => {\n        setSelectedCity(favCity);\n    };\n    //Set user selected City- using form input\n    const onCitySubmit = function (city) {\n        setSelectedCity(city);\n    };\n\n    //API call to get favourites from DB\n    const getFavourite = () => {\n        getFavourites().then((result) => {\n            console.log(result);\n            return setFavourites([result]);\n        });\n    };\n\n    //API call to save favourites to DB\n    const addFavourite = (favouriteCity) => {\n        console.log(favouriteCity);\n        postFavourite(favouriteCity).then(() => getFavourite());\n    };\n\n    //API call to dalete favourites in DB\n    const deleteFav = (city) => {\n        console.log(favourites[0]);\n\n        const result = favourites[0].filter(\n            (eachCity) => eachCity[\"name\"].toLowerCase() !== city.toLowerCase()\n        );\n\n        deleteFavourite(city).then(() => {\n            setFavourites([result]);\n        });\n    };\n\n    return (\n        <div>\n            <SearchForm\n                cities={cities}\n                onCitySubmit={onCitySubmit}\n                addFavourite={addFavourite}\n            />\n            <div id=\"flex-grid\">\n                {displayFavourites != null ? (\n                    <DisplayFavourite\n                        displayFavourites1={displayFavourites}\n                        deleteFavourite2={deleteFav}\n                        favouriteforcast2={favForcast}\n                    />\n                ) : null}\n\n                <UkMap cities={cities} styles={MapStyles.styles} />\n            </div>\n\n            {selectedCity != null ? <City cities={cities} /> : null}\n        </div>\n    );\n};\n\nexport default WeatherContainer;\n"]},"metadata":{},"sourceType":"module"}